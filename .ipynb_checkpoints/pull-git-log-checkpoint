#!/opt/anaconda3/bin/python3
import os
import subprocess
import argparse
from datetime import datetime, timedelta

# --- cli parsing ---
# build default start_dir using the USER environment variable 
default_start_dir = os.path.expanduser(f"/home/{os.environ.get('USER', 'username')}")
parser = argparse.ArgumentParser(description = "Print git commits by author in subdirectories from the last n days.")
parser.add_argument("--n_days", type = int, default = 7, help = "Number of days back to search. Default is 7.")
parser.add_argument("--start_dir", type = str, default = {default_start_dir}, help = f"Starting directory to search for repositories. Default is {default_start_dir}.")
parser.add_argument("--author", type = str, default = os.environ.get("USER", "username"), help = "Identifier of the author to search for. This string should uniquely identify either part of or the entire user's name or email address. Default is the user's $USERname on the assumption that it's related to a uniquely-identifying aspeect of their git config.")
args = parser.parse_args()

# --- config ---
start_dir = args.start_dir.pop() # expanduser above generates a set; need to pop it to retrieve the actual path
author_name = args.author
n_days = args.n_days

since_date = (datetime.now() - timedelta(days = n_days)).strftime("%Y-%m-%d")

print(f"--- Beginning in {start_dir} ---\n")
print(f"--- Printing commits by {author_name} since {since_date} ({n_days} days ago) ---")

# --- helper methods ---
def recurse_for_git(current_path, author, since):
    """
    Recursively traverse directories, find git repos, and print their logs.

    Args:
        current_path (str): The current directory being checked.
        author (str): The author name for git log.
        since (str): The date string for git log --since.
    """
    # DEBUG: print current path
    if not os.path.isdir(current_path):
        return # skip if not directory

    check_command = f"git -C '{current_path}' rev-parse --is-inside-working-tree"
    check_git_dir = subprocess.run(check_command, shell = True, capture_output = True)

    if check_git_dir.returncode == 0:
        print(f"\n --- {current_path} ---")
        log_command = f"git -C '{current_path}' log --author='{author}' --since='{since}'"
        log_result = subprocess.run(log_command, shell = True, text = True)

        return # this is a git repo and we've printed commit history. no need to recurse
    else: # recurse
        try:
            for item_name in os.listdir(current_path):
                item_path = os.path.join(current_path, item_name)

                # avoid recursing into hidden dirs
                if os.path.isdir(item_path) and not item_name.startswith('.'):
                    recurse_for_git(item_path, author, since_date) # recurse
        except PermissionError:
            print(f"Warning: Permission denied for directory: {current_path}")
        except Exception as e:
            print(f"An error occured while listing directory {current_path}: {e}")

# --- main logic ---
if not os.path.isdir(start_dir):
    print(f"Error: the starting directory start_dir is not a directory or does not exist.")
    exit(1)

# recurse
recurse_for_git(current_path = start_dir, author = author_name, since = since_date)